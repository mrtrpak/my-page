{"version":3,"sources":["components/NavBar/index.js","pages/HomePage/index.js","serviceWorker.js","index.js","App.js"],"names":["linksFunc","e","target","id","window","location","Navbar","className","Breadcrumbs","aria-label","onClick","HomePage","Boolean","hostname","match","render","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oRAOMA,G,MAAY,SAAAC,GAChB,MAAoB,WAAhBA,EAAEC,OAAOC,GACJC,OAAOC,SAAW,6BACA,aAAhBJ,EAAEC,OAAOC,GACXC,OAAOC,SAAW,kDAEzB,IAIW,SAASC,IACtB,OACE,yBAAKC,UAAU,UACb,wBAAIA,UAAU,QAAd,iBACA,kBAACC,EAAA,EAAD,CAAaC,aAAW,aAAaN,GAAG,YACtC,kBAAC,IAAD,CAAYA,GAAG,SAASO,QAASV,IACjC,kBAAC,IAAD,CAAcG,GAAG,WAAWO,QAASV,M,MCjB9B,SAASW,IACtB,OACE,6BACE,kBAAC,EAAD,MADF,QCIgBC,QACW,cAA7BR,OAAOC,SAASQ,UAEe,UAA7BT,OAAOC,SAASQ,UAEhBT,OAAOC,SAASQ,SAASC,MACvB,2DCbNC,iBAAO,mBCAQ,WACb,OACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWP,IACjC,kBAAC,IAAD,MACA,kBAAC,IAAD,WDPH,MAASQ,SAASC,eAAe,SD8HlC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.21293236.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Breadcrumbs from \"@material-ui/core/Breadcrumbs\";\r\nimport LinkedInIcon from \"@material-ui/icons/LinkedIn\";\r\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\r\n\r\nimport \"./style.css\";\r\n\r\nconst linksFunc = e => {\r\n  if (e.target.id === \"github\") {\r\n    return window.location = \"https://github.com/mrtrpak\";\r\n  } else if (e.target.id === \"linkedin\") {\r\n    return window.location = \"https://www.linkedin.com/in/michael-trpak/\"\r\n  } else {\r\n    return;\r\n  };\r\n};\r\n\r\nexport default function Navbar() {\r\n  return (\r\n    <div className=\"navbar\">\r\n      <h1 className=\"name\">MICHAEL TRPAK</h1>\r\n      <Breadcrumbs aria-label=\"breadcrumb\" id=\"navLinks\">\r\n        <GitHubIcon id=\"github\" onClick={linksFunc} />\r\n        <LinkedInIcon id=\"linkedin\" onClick={linksFunc} />\r\n      </Breadcrumbs>\r\n    </div>\r\n  );\r\n};","import React from \"react\";\r\n\r\nimport NavBar from \"../../components/NavBar\";\r\n\r\nimport \"./style.css\";\r\n\r\nexport default function HomePage() {\r\n  return (\r\n    <div>\r\n      <NavBar />\r\n      test\r\n    </div>\r\n  );\r\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nrender(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport {BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport HomePage from \"./pages/HomePage\";\n\nexport default function App() {\n  return (\n    <div>\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={HomePage} />\n          <Route></Route>\n          <Route></Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n};"],"sourceRoot":""}